"""
**********************************************************************

  A RapydScript to JavaScript compiler.
  https://github.com/atsepkov/RapydScript

  -------------------------------- (C) ---------------------------------

                       Author: Alexander Tsepkov
                         <atsepkov@pyjeon.com>
                         http://www.pyjeon.com

  Distributed under Apache 2.0 license:
    Copyright 2013 (c) Alexander Tsepkov <atsepkov@pyjeon.com>

  RapydScript source code is originally based on UglifyJS2 (covered
  by BSD license). UglifyJS2 was written by Mihai Bazon
  <mihai.bazon@gmail.com>, who is its respective copyright holder.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 **********************************************************************
"""
"use strict"

# for convenience we'll use a convention here that will work as follows:
#
#   if function is named, assume we'll be outputting the function itself
#   if the given baselib chunk is triggered
#
#   if function is unnamed, assume the function is a container for the logic
#   to be output. We're basically ignoring the wrapper and dumping what's inside

{
"abs": def abs(n):
    return Math.abs(n)
,
"all": def all(a):
    for e in a:
        if not e: return False
    return True
,
"any": def any(a):
    for e in a:
        if e: return True
    return False
,
"bin": def bin(a): return '0b' + (a >>> 0).toString(2)
,
"bind": def ՐՏ_bind(fn, thisArg):
    if fn.orig: fn = fn.orig
    if thisArg == False: return fn
    ret = def():
        return fn.apply(thisArg, arguments)
    ret.orig = fn
    return ret
,
"rebind_all": def ՐՏ_rebindAll(thisArg, rebind):
    if JS('typeof rebind') == "undefined": rebind = True
    for JS('var p in thisArg'):
        if thisArg[p] and thisArg[p].orig:
            if rebind: thisArg[p] = bind(thisArg[p], thisArg)
            else: thisArg[p] = thisArg[p].orig
,
"cmp": def cmp(a, b): return a < b ? -1 : a > b ? 1 : 0
,
"chr": def(): chr = String.fromCharCode
,
"dir": def dir(item):
    # TODO: this isn't really representative of real Python's dir(), nor is it
    # an intuitive replacement for "for ... in" loop, need to update this logic
    # and introduce a different way of achieving "for ... in"
    arr = []
    for JS('var i in item'): arr.push(i)
    return arr
,
"enumerate": def enumerate(item):
    arr = []
    for JS('var i=0;i<item.length;i++'): arr[arr.length] = [i, item[i]]
    return arr
,
"eslice": def ՐՏ_eslice(arr, step, start, end):
    arr = arr[:]
    if type(arr) == 'string' or isinstance(arr, String):
        isString = True
        arr = arr.split('')

    if step < 0:
        step = -step
        arr.reverse()
        if type(start) != "undefined": start = arr.length - start - 1
        if type(end) != "undefined": end = arr.length - end - 1
    if type(start) == "undefined": start = 0
    if type(end) == "undefined": end = arr.length

    arr = arr.slice(start, end).filter(def(e, i): return i % step == 0;)
    return isString ? arr.join('') : arr
,
"extends": def ՐՏ_extends(child, parent):
    child.prototype = Object.create(parent.prototype)
    child.prototype.constructor = child
,
"filter": def filter(oper, arr):
    return arr.filter(oper)
,
"hex": def hex(a): return '0x' + (a >>> 0).toString(16)
,
"in": def ՐՏ_in(val, arr):
    if Array.isArray(arr) or JS('typeof arr') == 'string': return arr.indexOf(val) != -1
    else:
        if arr.hasOwnProperty(val): return True
        return False
,
"iterable": def ՐՏ_Iterable(iterable):
    if Array.isArray(iterable) or isinstance(iterable, String) or JS('typeof iterable') == 'string': return iterable
    return Object.keys(iterable)    # so we can use 'for ... in' syntax with hashes
,
"len": def len(obj):
    if Array.isArray(obj) or JS('typeof obj') == 'string': return obj.length
    return Object.keys(obj).length
,
"map": def map(oper, arr):
    return arr.map(oper)
,
"max": def max(a):
    if Array.isArray(a):
        return Math.max.apply(null, a)
    else:
        return Math.max.apply(null, arguments)
,
"min": def min(a):
    if Array.isArray(a):
        return Math.min.apply(null, a)
    else:
        return Math.min.apply(null, arguments)
,
"mixin": def ՐՏ_mixin(target, source, overwrite):
    for JS('var i in source'):
        if source.hasOwnProperty(i) and overwrite or JS('typeof target[i]') == 'undefined': target[i] = source[i]
,
"print": def ՐՏ_print():
    if JS('typeof console') == 'object': console.log.apply(console, arguments)
,
"range": def range(start, stop, step):
    if arguments.length <= 1:
        stop = start or 0
        start = 0
    step = arguments[2] or 1

    length = Math.max(Math.ceil((stop - start) / step), 0)
    idx = 0
    range = Array(length)

    while idx < length:
        range[JS('idx++')] = start
        start += step
    return range
,
"reduce": def reduce(f, a): return Array.reduce(a, f)
,
"reversed": def reversed(arr):
    tmp = arr[:]
    return tmp.reverse()
,
"sorted": def sorted(arr):
    tmp = arr[:]
    return tmp.sort()
,
"sum": def sum(arr, start=0):
    return arr.reduce(
        def(prev, cur): return prev+cur
        ,
        start
    )
,
"zip": def zip(a, b):
    return [[a[i], b[i]] for i in range(Math.min(a.length, b.length))]
,
"getattr": def getattr(obj, name):
    return obj[name]
,
"setattr": def setattr(obj, name, value):
    obj[name] = value
,
"hasattr": def hasattr(obj, name):
    return JS('name in obj')
,
"eq": def eq(a, b):
    """
    Equality comparison that works with all data types, returns true if structure and
    contents of first object equal to those of second object

    Arguments:
        a: first object
        b: second object
    """
    if a is b:
        # simple object
        return True

    if (Array.isArray(a) and Array.isArray(b)) or (isinstance(a, Object) and isinstance(b, Object)):
        # if length ot type doesn't match, they can't be equal
        if a.constructor is not b.constructor or a.length is not b.length:
            return False

        if Array.isArray(a):
            # arrays
            for i in range(len(a)):
                if not eq(a[i], b[i]):
                    return False
        else:
            # hashes
            # compare individual properties (order doesn't matter if it's a hash)
            for i in a:
                # recursively test equality of object children
                if not eq(a[i], b[i]):
                    return False
        return True
    return False
,
"kwargs": def kwargs(f):
    # WARNING: when using this function decorator, you will not be able to use obfuscators that rename local variables
    argNames = f.toString().match(/\(([^\)]+)/)[1]
    argNames = argNames ? argNames.split(',').map(def(s): return s.trim();) : []
    return def():
        args = [].slice.call(arguments)
        if args.length:
            kw = args.pop()
            if type(kw) == 'object':
                for i in range(argNames.length):
                    if argNames[i] in dir(kw):
                        args[i] = kw[argNames[i]]
            else:		
                args.push(kw)
        return f.apply(this, args)
,

# Errors
# temporarily implemented via a wrapper pattern since there is no mechanism for assigning
# classes to dictionary keys yet
"AssertionError": def():
    class AssertionError(Error):
        def __init__(self, message):
            self.name = "AssertionError"
            self.message = message
,
"IndexError": def():
    class IndexError(Error):
        def __init__(self, message):
            self.name = "IndexError"
            self.message = message
,
"KeyError": def():
    class KeyError(Error):
        def __init__(self, message):
            self.name = "KeyError"
            self.message = message
,
"TypeError": def():
    class TypeError(Error):
        def __init__(self, message):
            self.name = "TypeError"
            self.message = message
,
"ValueError": def():
    class ValueError(Error):
        def __init__(self, message):
            self.name = "ValueError"
            self.message = message
,
}
